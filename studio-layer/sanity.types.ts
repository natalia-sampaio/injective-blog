/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Footer = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  linkGroups?: Array<{
    title?: string
    links?: Array<{
      label?: string
      url?: string
      _key: string
    }>
    _key: string
  }>
  copyright?: string
  privacy?: string
  terms?: string
}

export type SiteSettings = {
  _id: string
  _type: 'siteSettings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  siteTitle?: string
  siteDescription?: string
  sitePreview?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type FeaturedPosts = {
  _id: string
  _type: 'featuredPosts'
  _createdAt: string
  _updatedAt: string
  _rev: string
  featuredPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'post'
  }>
}

export type HomePage = {
  _id: string
  _type: 'homePage'
  _createdAt: string
  _updatedAt: string
  _rev: string
  featuredPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'post'
  }>
}

export type Tags = {
  _id: string
  _type: 'tags'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  publishedAt?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tags'
  }>
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Footer
  | SiteSettings
  | FeaturedPosts
  | HomePage
  | Tags
  | Post
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../nuxt-layer/utils/queries.ts
// Variable: HERO_QUERY
// Query: *[_type == "featuredPosts"][0]{    featuredPosts[]->{      _id,      title,      slug,      publishedAt,      "imageUrl": image.asset->url,      body[0],      "tags": tags[]->title    }  }
export type HERO_QUERYResult = {
  featuredPosts: Array<{
    _id: string
    title: string | null
    slug: Slug | null
    publishedAt: string | null
    imageUrl: string | null
    body: {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    } | null
    tags: Array<string | null> | null
  }> | null
} | null
// Variable: POSTS_QUERY
// Query: *[_type == "post"]{    _id,    title,    slug,    publishedAt,    "imageUrl": image.asset->url,    body[0],    "tags": tags[]->title  }
export type POSTS_QUERYResult = Array<{
  _id: string
  title: string | null
  slug: Slug | null
  publishedAt: string | null
  imageUrl: string | null
  body: {
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  } | null
  tags: Array<string | null> | null
}>
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,    title,    slug,    publishedAt,    "imageUrl": image.asset->url,    body  }
export type POST_QUERYResult = {
  _id: string
  title: string | null
  slug: Slug | null
  publishedAt: string | null
  imageUrl: string | null
  body: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
} | null
// Variable: TAGS_QUERY
// Query: *[_type == "tags"]{    title,    "slug": slug.current  }
export type TAGS_QUERYResult = Array<{
  title: string | null
  slug: string | null
}>
// Variable: FOOTER_QUERY
// Query: *[_type == "footer"] | order(_updatedAt desc) [0]
export type FOOTER_QUERYResult = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  linkGroups?: Array<{
    title?: string
    links?: Array<{
      label?: string
      url?: string
      _key: string
    }>
    _key: string
  }>
  copyright?: string
  privacy?: string
  terms?: string
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "featuredPosts"][0]{\n    featuredPosts[]->{\n      _id,\n      title,\n      slug,\n      publishedAt,\n      "imageUrl": image.asset->url,\n      body[0],\n      "tags": tags[]->title\n    }\n  }\n': HERO_QUERYResult
    '\n  *[_type == "post"]{\n    _id,\n    title,\n    slug,\n    publishedAt,\n    "imageUrl": image.asset->url,\n    body[0],\n    "tags": tags[]->title\n  }\n': POSTS_QUERYResult
    '\n  *[_type == "post" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    publishedAt,\n    "imageUrl": image.asset->url,\n    body\n  }\n': POST_QUERYResult
    '\n  *[_type == "tags"]{\n    title,\n    "slug": slug.current\n  }\n': TAGS_QUERYResult
    '\n  *[_type == "footer"] | order(_updatedAt desc) [0]\n': FOOTER_QUERYResult
  }
}
